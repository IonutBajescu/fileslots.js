window.slotProgressBars = 0;
window.fileId = 0;

var ____Class1=React.Component;for(var ____Class1____Key in ____Class1){if(____Class1.hasOwnProperty(____Class1____Key)){FilesSlots[____Class1____Key]=____Class1[____Class1____Key];}}var ____SuperProtoOf____Class1=____Class1===null?null:____Class1.prototype;FilesSlots.prototype=Object.create(____SuperProtoOf____Class1);FilesSlots.prototype.constructor=FilesSlots;FilesSlots.__superConstructor__=____Class1;

function FilesSlots(props) {"use strict";
    ____Class1.call(this,props);

    var files = typeof props.files === 'undefined' ? [] : JSON.parse(props.files);
    this.state = {
        files: files
    };

    this.slot_size = '95px';

    this.state.form = $('<form action="' + this.props.target + '" method="post" enctype="multipart/form-data" style="display:none"/>').appendTo('body');
    this.attachUploader(this.props.name, this.state.form);
}

Object.defineProperty(FilesSlots.prototype,"attachUploader",{writable:true,configurable:true,value:function(name, form) {"use strict";

    var selector = '[data-name="' + name + '"]';

    var progress = function (id) {
        return $('[data-progress="' + id + '"]');
    };

    var id = 0;

    var slots = this;
    $(form).ajaxForm({
        beforeSend: function () {
            id = ++window.slotProgressBars;
            $(selector).parent().after('<div data-progress="' + id + '" class="ui progress" style="display:none"><div class="bar"><div class="progress"></div></div></div>');
            progress(id).fadeIn(200).addClass('active');
        },
        uploadProgress: function (event, position, total, percentComplete) {
            progress(id).progress({
                percent: percentComplete
            });
        },
        complete: function (xhr) {
            progress(id).addClass('success').removeClass('active');
            setTimeout(function () {
                $('[data-progress]').fadeOut(200);
            }, 500);

            xhr.responseJSON.files.forEach((function(uploaded_file, i)  {
                slots.state.files.forEach((function(file, j)  {
                    if (!file.uploaded && file.name == uploaded_file.filename) {
                        slots.state.files[j].uploaded = true;
                        slots.state.files[j].id = uploaded_file.id;
                        slots.state.files[j].url = uploaded_file.url;
                        slots.state.files[j].preview = uploaded_file.preview;
                        slots.state.files[j].download = uploaded_file.download;
                    }
                }));
            }));
            slots.setState({files: slots.state.files});
        }
    });
}});

Object.defineProperty(FilesSlots.prototype,"renderFullSlot",{writable:true,configurable:true,value:function(file) {"use strict";
    return (
        React.createElement("div", {
                onMouseLeave: this.slotSizeAnimation.bind(this, file, 'leave'),
                onMouseEnter: this.slotSizeAnimation.bind(this, file, 'enter')
            },
            React.createElement("div", {
                    className: "slot-container ui move up reveal",
                    style: {float: 'left', width: this.slot_size},
                    "data-index": file.index
                },
                React.createElement("div", {className: "visible content"},
                    React.createElement("div", {
                            className: "full slot",
                            style: {backgroundImage: 'url(' + file.preview + ')'}
                        },
                        React.createElement("div", {className: "name"}, " ", file.name, " ")
                    )
                ),
                React.createElement("div", {className: "hidden content"},
                    React.createElement("div", {className: "slot-options"},
                        React.createElement("div", {className: "title"},
                            "Options for ", file.name
                        ),
                        React.createElement("br", null),

                        React.createElement("div", null,
                            React.createElement("a", {className: "ui fluid green button", target: "_blank", href: file.download},
                                React.createElement("i", {className: "download icon"}),
                                "Download"
                            ),
                            React.createElement("div", {className: "ui fluid yellow button"},
                                React.createElement("i", {className: "edit icon"}),
                                "Rename"
                            ),
                            React.createElement("div", {className: "ui fluid red button", onClick: this.removeFile.bind(this, file)},
                                React.createElement("i", {className: "delete icon"}),
                                "Remove"
                            )
                        )
                    )
                )
            )
        )
    );
}});

Object.defineProperty(FilesSlots.prototype,"removeFile",{writable:true,configurable:true,value:function(remove) {"use strict";
    this.state.files.forEach((function(file, index)  {
        if (file.index == remove.index) {
            this.state.files.splice(index, 1);
        }
    }.bind(this)));

    this.setState({
        files: this.state.files
    });
}});

Object.defineProperty(FilesSlots.prototype,"slotSizeAnimation",{writable:true,configurable:true,value:function(file, animation) {"use strict";
    var container = $('.slot-container[data-index="' + file.index + '"]');
    var slot = container.find('.slot, .slot-options');

    var options = {
        duration: 200,
        queue: false
    };

    var leave = function(element)  {return element.animate({
        width: this.slot_size,
        height: this.slot_size
    }, options);}.bind(this);

    var enter = function(element)  {return element.animate({
        width: '200px',
        height: '180px'
    }, options);};


    if (animation == 'enter') {
        enter(container);
        enter(slot);
    }
    else {
        leave(container);
        leave(slot);
    }
}});

Object.defineProperty(FilesSlots.prototype,"renderEmptySlot",{writable:true,configurable:true,value:function() {"use strict";
    return (
        React.createElement("div", null,
            React.createElement("div", {className: "empty slot", onClick: this.displayFileChooser.bind(this)},
                React.createElement("i", {className: "upload icon"})
            )
        )
    );
}});

Object.defineProperty(FilesSlots.prototype,"handleSlotFilling",{writable:true,configurable:true,value:function(event) {"use strict";
    var files = event.target.files;
    if (files.length) {
        for (var i = 0; i < files.length; i++) {
            var file = {
                name: files[i].name.split(/(\\|\/)/g).pop(),
                uploaded: false
            };

            if (file.name.match(/\.pdf$/i)) {
                file.preview = '/assets/pdf.png';
            }

            var index = this.state.files.push(file) - 1;
            this.state.files[index].index = window.fileId++;
            this.handleImageAvailable(files[i], index);
        }


        this.setState({
            files: this.state.files
        });

        this.state.form.submit();
    }
}});

Object.defineProperty(FilesSlots.prototype,"handleImageAvailable",{writable:true,configurable:true,value:function(file, index) {"use strict";
    var reader = new FileReader(), slots = this;
    reader.readAsDataURL(file);
    reader.onload = function (e) {
        for (var i = 0; i < slots.state.files.length; i++) {
            if (i === index) {
                if (slots.state.files[i].name.match(/\.(jpg|png|gif|jpeg)$/i)) {
                    slots.state.files[i].preview = e.target.result;
                }
                slots.state.files[i].url = e.target.result;
            }
        }
        slots.setState({files: slots.state.files});
    };
}});

Object.defineProperty(FilesSlots.prototype,"displayFileChooser",{writable:true,configurable:true,value:function(e) {"use strict";
    var input = this.createNewInput();
    React.render(input, this.state.form[0]);
    this.state.form.find('[type=file]').last().trigger(e);
}});

Object.defineProperty(FilesSlots.prototype,"createNewInput",{writable:true,configurable:true,value:function() {"use strict";
    return (
        React.createElement("input", {type: "file", name: "files[]", onChange: this.handleSlotFilling.bind(this), multiple: true})
    );
}});

Object.defineProperty(FilesSlots.prototype,"render",{writable:true,configurable:true,value:function() {"use strict";
    var getFilesIds = _.map(this.state.files, function(file)  {return file.id;});

    return (
        React.createElement("div", {className: "files-slots-widget", "data-name": this.props.name},
            React.createElement("div", {className: "files-slots"},
                this.state.files.map(this.renderFullSlot.bind(this)),
                _.range(0, this.props.empty_slots).map(this.renderEmptySlot.bind(this))
            ),

            React.createElement("input", {type: "hidden", name: this.props.name, value: getFilesIds.join(',')}),

            React.createElement("div", {className: "clearfix"})
        )
    );
}});


window.FilesSlots = FilesSlots;