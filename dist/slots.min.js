var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

window.slotProgressBars = 0;
window.fileId = 0;

var FilesSlots = (function (_React$Component) {
    function FilesSlots(props) {
        _classCallCheck(this, FilesSlots);

        _get(Object.getPrototypeOf(FilesSlots.prototype), 'constructor', this).call(this, props);

        var files = typeof props.files === 'undefined' ? [] : JSON.parse(props.files);
        this.state = {
            files: files
        };

        this.slot_size = '95px';

        this.state.form = $('<form action="' + this.props.target + '" method="post" enctype="multipart/form-data" style="display:none"/>').appendTo('body');
        this.attachUploader(this.props.name, this.state.form);
    }

    _inherits(FilesSlots, _React$Component);

    _createClass(FilesSlots, [{
        key: 'attachUploader',
        value: function attachUploader(name, form) {

            var selector = '[data-name="' + name + '"]';

            var progress = function progress(id) {
                return $('[data-progress="' + id + '"]');
            };

            var id = 0;

            var slots = this;
            $(form).ajaxForm({
                beforeSend: function beforeSend() {
                    id = ++window.slotProgressBars;
                    $(selector).parent().after('<div data-progress="' + id + '" class="ui progress" style="display:none"><div class="bar"><div class="progress"></div></div></div>');
                    progress(id).fadeIn(200).addClass('active');
                },
                uploadProgress: function uploadProgress(event, position, total, percentComplete) {
                    progress(id).progress({
                        percent: percentComplete
                    });
                },
                complete: function complete(xhr) {
                    progress(id).addClass('success').removeClass('active');
                    setTimeout(function () {
                        $('[data-progress]').fadeOut(200);
                    }, 500);

                    xhr.responseJSON.files.forEach(function (uploaded_file, i) {
                        slots.state.files.forEach(function (file, j) {
                            if (!file.uploaded && file.name == uploaded_file.real_filename) {
                                slots.state.files[j].uploaded = true;
                                slots.state.files[j].id = uploaded_file.id;
                                slots.state.files[j].url = uploaded_file.url;
                                slots.state.files[j].preview = uploaded_file.preview;
                                slots.state.files[j].download = uploaded_file.download;
                            }
                        });
                    });
                    slots.setState({ files: slots.state.files });
                }
            });
        }
    }, {
        key: 'renderFullSlot',
        value: function renderFullSlot(file) {
            return React.createElement(
                'div',
                {
                    onMouseLeave: this.slotSizeAnimation.bind(this, file, 'leave'),
                    onMouseEnter: this.slotSizeAnimation.bind(this, file, 'enter')
                },
                React.createElement(
                    'div',
                    {
                        className: 'slot-container ui move up reveal',
                        style: { float: 'left', width: this.slot_size },
                        'data-index': file.index
                    },
                    React.createElement(
                        'div',
                        { className: 'visible content' },
                        React.createElement(
                            'div',
                            {
                                className: 'full slot',
                                style: { backgroundImage: 'url(' + file.preview + ')' }
                            },
                            React.createElement(
                                'div',
                                { className: 'name' },
                                ' ',
                                file.name,
                                ' '
                            )
                        )
                    ),
                    React.createElement(
                        'div',
                        { className: 'hidden content' },
                        React.createElement(
                            'div',
                            { className: 'slot-options' },
                            React.createElement(
                                'div',
                                { className: 'title' },
                                'Options for ',
                                file.name
                            ),
                            React.createElement('br', null),
                            React.createElement(
                                'div',
                                null,
                                React.createElement(
                                    'a',
                                    { className: 'ui fluid green button', target: '_blank', href: file.download },
                                    React.createElement('i', { className: 'download icon' }),
                                    'Download'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'ui fluid yellow button' },
                                    React.createElement('i', { className: 'edit icon' }),
                                    'Rename'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'ui fluid red button', onClick: this.removeFile.bind(this, file) },
                                    React.createElement('i', { className: 'delete icon' }),
                                    'Remove'
                                )
                            )
                        )
                    )
                )
            );
        }
    }, {
        key: 'removeFile',
        value: function removeFile(remove) {
            var _this = this;

            this.state.files.forEach(function (file, index) {
                if (file.index == remove.index) {
                    _this.state.files.splice(index, 1);
                }
            });

            this.setState({
                files: this.state.files
            });
        }
    }, {
        key: 'slotSizeAnimation',
        value: function slotSizeAnimation(file, animation) {
            var _this2 = this;

            var container = $('.slot-container[data-index="' + file.index + '"]');
            var slot = container.find('.slot, .slot-options');

            var options = {
                duration: 200,
                queue: false
            };

            var leave = function leave(element) {
                return element.animate({
                    width: _this2.slot_size,
                    height: _this2.slot_size
                }, options);
            };

            var enter = function enter(element) {
                return element.animate({
                    width: '200px',
                    height: '180px'
                }, options);
            };

            if (animation == 'enter') {
                enter(container);
                enter(slot);
            } else {
                leave(container);
                leave(slot);
            }
        }
    }, {
        key: 'renderEmptySlot',
        value: function renderEmptySlot() {
            return React.createElement(
                'div',
                null,
                React.createElement(
                    'div',
                    { className: 'empty slot', onClick: this.displayFileChooser.bind(this) },
                    React.createElement('i', { className: 'upload icon' })
                )
            );
        }
    }, {
        key: 'handleSlotFilling',
        value: function handleSlotFilling(event) {
            var files = event.target.files;
            if (files.length) {
                for (var i = 0; i < files.length; i++) {
                    var file = {
                        name: files[i].name.split(/(\\|\/)/g).pop(),
                        uploaded: false
                    };

                    if (file.name.match(/\.pdf$/i)) {
                        file.preview = '/assets/pdf.png';
                    }

                    var index = this.state.files.push(file) - 1;
                    this.state.files[index].index = window.fileId++;
                    this.handleImageAvailable(files[i], index);
                }

                this.setState({
                    files: this.state.files
                });

                this.state.form.submit();
            }
        }
    }, {
        key: 'handleImageAvailable',
        value: function handleImageAvailable(file, index) {
            var reader = new FileReader(),
                slots = this;
            reader.readAsDataURL(file);
            reader.onload = function (e) {
                for (var i = 0; i < slots.state.files.length; i++) {
                    if (i === index) {
                        if (slots.state.files[i].name.match(/\.(jpg|png|gif|jpeg)$/i)) {
                            slots.state.files[i].preview = e.target.result;
                        }
                        slots.state.files[i].url = e.target.result;
                    }
                }
                slots.setState({ files: slots.state.files });
            };
        }
    }, {
        key: 'displayFileChooser',
        value: function displayFileChooser(e) {
            var input = this.createNewInput();
            React.render(input, this.state.form[0]);
            this.state.form.find('[type=file]').last().trigger(e);
        }
    }, {
        key: 'createNewInput',
        value: function createNewInput() {
            return React.createElement('input', { type: 'file', name: 'files[]', onChange: this.handleSlotFilling.bind(this), multiple: true });
        }
    }, {
        key: 'render',
        value: function render() {
            var getFilesIds = _.map(this.state.files, function (file) {
                return file.id;
            });

            return React.createElement(
                'div',
                { className: 'files-slots-widget', 'data-name': this.props.name },
                React.createElement(
                    'div',
                    { className: 'files-slots' },
                    this.state.files.map(this.renderFullSlot.bind(this)),
                    _.range(0, this.props.empty_slots).map(this.renderEmptySlot.bind(this))
                ),
                React.createElement('input', { type: 'hidden', name: this.props.name, value: getFilesIds.join(',') }),
                React.createElement('div', { className: 'clearfix' })
            );
        }
    }]);

    return FilesSlots;
})(React.Component);
window.FilesSlots = FilesSlots;